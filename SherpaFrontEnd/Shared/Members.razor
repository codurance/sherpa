@using SherpaFrontEnd.Model
@using Microsoft.AspNetCore.Components
@using SherpaFrontEnd.Shared.Modals
@using SherpaFrontEnd.ViewModel
@using System.Xml
@using System.ComponentModel

<table class="table table-striped">
    <thead>
    <tr>
        <th scope="col">Name</th>
        <th scope="col">Last Name</th>
        <th scope="col">Position</th>
        <th scope="col">Email</th>
        <th scope="col"></th>
    </tr>
    </thead>
    
    @if (_team is not null && _team.Members.Any())
    {
        <tbody>
        @foreach (var currentMember in _team.Members)
        {
            <tr id="@currentMember.Email">
                <td class="align-middle">
                    @currentMember.Name
                </td>
                <td class="align-middle">
                    @currentMember.LastName
                </td>
                <td class="align-middle">
                    @currentMember.Position
                </td>
                <td class="align-middle">
                    @currentMember.Email
                </td>
                <td>
                    <div class="btn-group">
                        <button class="btn btn-edit" onclick="@(() => OnEditMemberClick(currentMember))">
                            <span class="oi oi-pencil"></span>
                        </button>
                        <button class="btn btn-remove" onclick="@(() => OnDeleteMemberClick(currentMember))">
                            <span class="oi oi-trash"></span>
                        </button>
                    </div>
                </td>
            </tr>
        }
        </tbody>
    }
</table>

<div>
    <button class="w-25 btn btn-outline-primary" @onclick="AddTeamMember">Add</button>
</div>

@code {
    private Team? _team;
    [Parameter]
    public Team? Team
    {
        get => _team;
        set
        {
            Console.WriteLine("Team setter");
            if (value is null)
            {
                return;
            }

            _team = value;
            _team.Members.Sort((m1, m2) =>
                string.Compare(m1.LastName, m2.LastName, StringComparison.Ordinal));
        }
    }
    
    [Parameter]
    public EventCallback<Team> OnUpdateTeam { get; set; }

    [CascadingParameter]
    public IModalService Modal { get; set; } = default!;

    private async Task UpdateTeamMember()
    {
        Console.WriteLine(_team?.Members);
        await OnUpdateTeam.InvokeAsync(_team);
    }

    private async Task DeleteTeamMember(string? memberEmail)
    {
        _team?.Members.Remove(_team.Members.First(m => m.Email == memberEmail));
        await OnUpdateTeam.InvokeAsync(_team);
    }
    
    private async Task AddTeamMember()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(EditMemberModal.TeamMember), new TeamMember());

        var modal = Modal.Show<EditMemberModal>("Add member", parameters);
        var modalResult = await modal.Result;

        if (!modalResult.Cancelled)
        {
            var teamMemberToAdd = (EditTeamMember)modalResult.Data;

            if (_team is not null)
            {
                if (_team.Members.Any(m => m.Email == teamMemberToAdd.Email))
                {
                    Modal.Show<WarningModal>("Email should be unique");
                    return;
                }

                _team.Members.Add(new TeamMember
                {
                    Name = teamMemberToAdd.Name,
                    LastName = teamMemberToAdd.LastName,
                    Position = teamMemberToAdd.Position,
                    Email = teamMemberToAdd.Email
                });
                await OnUpdateTeam.InvokeAsync(_team);
            }
        }
    }

    private async Task OnEditMemberClick(TeamMember? currentMember)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(EditMemberModal.TeamMember), currentMember);
        var membersEmails = _team?.Members
            .FindAll(m => m.Email != currentMember?.Email)
            .Select(m => m.Email).ToList();
        parameters.Add(nameof(EditMemberModal.MembersEmails), membersEmails);

        var modal = Modal.Show<EditMemberModal>($"Edit {currentMember?.Name} {currentMember?.LastName}", parameters);
        var modalResult = await modal.Result;

        if (!modalResult.Cancelled)
        {
            var updatesTeam = (EditTeamMember)modalResult.Data;
            if (currentMember is not null)
            {
                currentMember.Name = updatesTeam.Name;
                currentMember.LastName = updatesTeam.LastName;
                currentMember.Position = updatesTeam.Position;
                currentMember.Email = updatesTeam.Email;
                await UpdateTeamMember();
            }
        }
    }

    private async Task OnDeleteMemberClick(TeamMember? currentMember)
    {
        var modal = Modal.Show<ConfirmationModal>($"Delete {currentMember?.Name} {currentMember?.LastName}?");
        var modalResult = await modal.Result;

        if (!modalResult.Cancelled)
        {
            await DeleteTeamMember(currentMember?.Email);
        }
    }
}