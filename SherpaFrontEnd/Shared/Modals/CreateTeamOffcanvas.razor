@using SherpaFrontEnd.Services
@using SherpaFrontEnd.Model
@using SherpaFrontEnd.Dtos.Team
@inject ITeamDataService TeamDataService;
@inject IGuidService GuidService;
@inject IToastNotificationService ToastService
@inject NavigationManager NavManager
@inject IJSRuntime JS

<div class="offcanvas offcanvas-end w-1/2 max-w-2xl px-8 pt-8 pb-0 h-screen flex flex-col" tabindex="-1" id="@CanvasId" aria-labelledby="offcanvasExampleLabel">
    <div class="flex justify-between mb-8">
        <h2 class="font-bold text-primary-dark-principal text-title-h1 leading-9" id="offcanvasExampleLabel">Create new team</h2>
        <button type="button" class="text-primary-dark-principal font-bold" data-bs-dismiss="offcanvas" aria-label="Close">â•³</button>
    </div>
    <div class="h-full">
        <EditForm class="flex flex-col h-full justify-between" Model="Team" OnValidSubmit="@CreateTeam">
            <DataAnnotationsValidator/>
            <div class="text-primary-dark-principal flex flex-col w-1/2">
                <label for="team-name-input" class="text-sm mb-1.5">Team name</label>
                <InputText class="modalInputText" id="team-name-input" @bind-Value="Team.Name"/>
                <ValidationMessage For="@(() => Team.Name)"/>
            </div>
            <div class="flex gap-6 py-6">
                <button type="button" @onclick="@CloseOffCanvas" class="flex-grow rounded-lg py-2 text-primary-red-principal-800 font-semibold text-base border border-gray-inner-shadow bg-white hover:bg-primary-red-100">
                    Cancel
                </button>
                <button type="submit" class="flex-grow bg-primary-red-principal-800 hover:bg-primary-red-900 rounded-lg py-2 text-white font-semibold text-base">
                    Confirm
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {

    [Parameter] public string? CanvasId { get; set; }

    private Team Team { get; } = new();

    private const string NewTeamFormId = "create-new-team-form";

    private async Task CreateTeam()
    {
        var teamId = GuidService.GenerateRandomGuid();

        try
        {
            await TeamDataService.AddTeam(new Team(teamId, Team.Name!));

            var newUri = NavManager.BaseUri + $"team-content/{teamId.ToString()}";
            NavManager.NavigateTo(newUri);
            ToastService.ShowSuccess("Team created successfully");
        }
        catch
        {
            var errorUri = NavManager.BaseUri + $"error";
            NavManager.NavigateTo(errorUri);
        }
    }

    private async Task CloseOffCanvas()
    {
        await JS.InvokeVoidAsync("hideOffCanvas", NewTeamFormId);
    }


}