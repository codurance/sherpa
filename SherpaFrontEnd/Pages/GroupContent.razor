@using SherpaFrontEnd.Model
@using SherpaFrontEnd.Services
@using SherpaFrontEnd.Shared.Tabs
@inject IGroupDataService GroupDataService;
@inject IAssessmentsDataService AssessmentsDataService;

@page "/group-content/{GroupId:guid?}"

<h3>@Group?.Name</h3>

<TabControl>
    <TabPage Text="Members">
        <Members
            Group="@Group"
            OnUpdateGroup="@OnUpdateGroup">
        </Members>
    </TabPage>
    <TabPage Text="Surveys">
        <Surveys
            SurveyTemplates="@SurveyTemplates"
            SelectedGroupAssessments="@Assessments"
            SelectedGroupId="@Group?.Id"
            Emails="@Emails"
            OnAddSurvey="@OnAddSurvey"
            OnCreateEvaluation="@OnUpdateAssessment"
            OnDeleteEvaluation="@OnUpdateAssessment">
        </Surveys>
    </TabPage>
</TabControl>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    
    [Parameter]
    public Guid GroupId { get; set; } = Guid.Empty;
    
    public Group? Group { get; set; }

    private List<string?> Emails { get; set; } = new();
    
    private List<SurveyTemplate>? SurveyTemplates { get; set; }
    
    private List<Assessment>? Assessments { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        Group = await GroupDataService.GetGroup(GroupId);
        Emails = Group!.Members.Select(m => m.Email).ToList();
        SurveyTemplates = await AssessmentsDataService.GetTemplates();
        Assessments = await AssessmentsDataService.GetAssessments(GroupId);
    }
    
    private async Task OnUpdateGroup(Group group)
    {
        await GroupDataService.PutGroup(group);
    }
    
    private async Task OnUpdateAssessment(Assessment assessment)
    {
        await AssessmentsDataService.PutAssessment(assessment);
    }
    
    private async Task OnAddSurvey(SurveyTemplate template)
    {
        var assessmentName = $"{template.Name} {DateTime.Now}";
        var assessment = await AssessmentsDataService.AddAssessment(GroupId, template.Id, assessmentName);

        if (assessment is not null)
        {
            Assessments.Add(assessment);
        }
    }
}