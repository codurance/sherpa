@using SherpaFrontEnd.Services
@using SherpaFrontEnd.Core.Tabs
@using SherpaFrontEnd.Dtos.Survey
@using SherpaFrontEnd.Dtos.Team
@using SherpaFrontEnd.Pages.TeamContent.Components
@using SherpaFrontEnd.Shared.Graphs
@inject ITeamDataService TeamDataService
@inject ISurveyService SurveyService
@inject NavigationManager NavigationManager
@inject IJSRuntime Js


@page "/team-content/{teamId:guid}/{tab?}"

@if (Team != null && Surveys != null)
{
    <h1 class="font-semibold text-primary-dark-principal text-title-h2--semibold leading-7 mb-6">
        @Team.Name
    </h1>


    <TabControl InitialTab="@Tab">
        <TabPage Text="Analysis">
            <ColumnsChart
                categories=@(new List<string> { "Cat1", "Cat2", "Cat3" })
                series=@(new List<ColumnsChart.ColumnSeries> { new() { Name = "Series1", Data = new List<double> { 1, 2, 3 } }, new() { Name = "Series2", Data = new List<double> { 4, 5, 6 } } })
                yaxis=@(new ColumnsChart.YAxis() { Title = new ColumnsChart.YAxis.YAxisTitle() { Text = "Some title for the Y axis" } })/>
            <HorizontalColumnsCharts
                categories=@(new List<string> { "Cat1", "Cat2", "Cat3" })
                series=@(new List<HorizontalColumnsCharts.ColumnSeries> { new() { Name = "Series1", Data = new List<double> { 1, 2, 3 } }, new() { Name = "Series2", Data = new List<double> { 4, 5, 6 } } , new() { Name = "Series3", Data = new List<double> { 3, 5, 7 } }})
            />
            
            <ScatterPlotChart />
            <button @onclick="RedirectToLaunchSurveyPage" type="button" class="bg-primary-red-principal-800 hover:bg-primary-red-900 rounded-lg px-6 py-2 text-white font-semibold text-sm">
                Launch new survey
            </button>
        </TabPage>
        <TabPage Text="Surveys" Args="@Surveys">
            @if (Surveys != null && Surveys.Count > 0)
            {
                <div class="my-5 flex justify-between items-center rounded-3xl gap-2.5">
                    <h2 class="flex-grow text-title-h3 text-primary-dark-principal">All surveys launched in the team</h2>
                    <button @onclick="RedirectToLaunchSurveyPage" type="button" class="bg-primary-red-principal-800 hover:bg-primary-red-900 rounded-lg px-6 py-2 text-white font-semibold text-sm">
                        <i class="las la-plus"></i>
                        Launch new survey
                    </button>
                </div>
                <SurveyTable DownloadSurveyResponses="@DownloadSurveyResponses" Surveys="Surveys" Flags="SurveyFlags ?? new SurveyTableFeatureFlags()"/>
            }
            @if (Surveys != null && Surveys.Count == 0)
            {
                <div class="py-5 flex justify-center items-center flex-col bg-indigo-50 rounded-3xl gap-2.5">
                    <img src="/img/empty-survey-icon.svg" alt="Empty Survey Icon" class="w-8 h-8">
                    <p class="text-center text-primary-dark-principal text-xl font-semibold leading-tight mb-1">
                        You donâ€™t have any surveys yet
                    </p>
                    <p class="text-center text-gray-700 text-base">
                        Let's begin the journey towards a stronger, more effective team!
                    </p>
                    <button @onclick="RedirectToLaunchSurveyPage" type="button" class="bg-primary-red-principal-800 hover:bg-primary-red-900 rounded-lg px-6 py-2 text-white font-semibold text-sm">
                        Launch first survey
                    </button>
                </div>
            }
        </TabPage>
        <TabPage Text="Members" Args="@Team.Members">
            <MemberTable Team="Team" CreateTeamMember="@CreateTeamMember"/>
        </TabPage>
    </TabControl>
}

@code {

    [Parameter] public RenderFragment ChildContent { get; set; }

    [Parameter] public Guid TeamId { get; set; }

    [Parameter] public string Tab { get; set; }
    [Parameter] public SurveyTableFeatureFlags? SurveyFlags { get; set; }

    public Team? Team { get; set; }

    private List<string> Emails { get; set; } = new();

    private List<Survey>? Surveys { get; set; }

    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await FetchTeam();
        Emails = Team!.Members.Select(m => m.Email).ToList();
        Surveys = await SurveyService.GetAllSurveysByTeam(TeamId);
    }

    private async Task FetchTeam()
    {
        Team = await TeamDataService.GetTeamById(TeamId);
        StateHasChanged();
    }

    private async Task CreateTeamMember(AddTeamMemberDto addTeamMemberDto)
    {
        // Create member
        await TeamDataService.AddTeamMember(addTeamMemberDto);

        // Re-fetch team
        await FetchTeam();
    }


    private async Task DownloadSurveyResponses(Survey survey)
    {
        try
        {
            var surveyResponsesBytes = await SurveyService.DownloadSurveyResponses(survey.Id);
            await Js.InvokeVoidAsync("downloadFile", $"{survey.Title} responses.csv", "file/csv", surveyResponsesBytes);
        }
        catch (Exception error)
        {
            Console.WriteLine(error);
            NavigationManager.NavigateTo(NavigationManager.BaseUri + "error");
        }
    }

    private void RedirectToLaunchSurveyPage()
    {
        NavigationManager.NavigateTo(NavigationManager.BaseUri + "survey/delivery-settings?template=Hackman%20Model");
    }

}