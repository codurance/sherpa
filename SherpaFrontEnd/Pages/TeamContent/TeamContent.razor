@using SherpaFrontEnd.Services
@using SherpaFrontEnd.Core.Tabs
@using SherpaFrontEnd.Dtos.Survey
@using SherpaFrontEnd.Dtos.Team
@using SherpaFrontEnd.Pages.TeamContent.Components
@using SherpaFrontEnd.Dtos.Analysis
@inject ITeamDataService TeamDataService
@inject ISurveyService SurveyService
@inject IToastNotificationService ToastService
@inject IAnalysisService AnalysisService
@inject NavigationManager NavigationManager
@inject IJSRuntime Js

@page "/team-content/{teamId:guid}/{tab?}"

@if (Team != null && Surveys != null)
{
    <h1 class="font-semibold text-primary-dark-principal text-title-h2--semibold leading-7 mb-6">
        @Team.Name
    </h1>


    <TabControl InitialTab="@Tab">
        <TabPage Text="Analysis">
            @if (Surveys is { Count: > 0 })
            {
                <h2 class="font-normal text-title-h2--semibold leading-6 mt-9 mb-9 text-primary-dark-principal ml-3.5">General results</h2>
                <div id="@_generalResultsColumnChartId"></div>
            }
            @if (Surveys is { Count: 0 })
            {
                <SurveysEmpty
                    Title="Here you will see the analysis reports from the surveys"
                    Description="Let's begin the journey towards a stronger, more effective team!"
                    Button="Launch first survey"/>
            }
        </TabPage>
        <TabPage Text="Surveys" Args="@Surveys">
            @if (Surveys is { Count: > 0 })
            {
                <div class="my-5 flex justify-between items-center rounded-3xl gap-2.5">
                    <h2 class="flex-grow text-title-h3 text-primary-dark-principal">All surveys launched in the team</h2>
                    <button @onclick="RedirectToLaunchSurveyPage" type="button" class="bg-primary-red-principal-800 hover:bg-primary-red-900 rounded-lg px-6 py-2 text-white font-semibold text-sm">
                        <i class="las la-plus"></i>
                        Launch new survey
                    </button>
                </div>
                <SurveyTable DownloadSurveyResponses="@DownloadSurveyResponses" Surveys="Surveys" Flags="SurveyFlags ?? new SurveyTableFeatureFlags()"/>
            }
            @if (Surveys is { Count: 0 })
            {
                <SurveysEmpty
                    Title="You donâ€™t have any surveys yet"
                    Description="Let's begin the journey towards a stronger, more effective team!"
                    Button="Launch first survey" />
            }
        </TabPage>
        <TabPage Text="Members" Args="@Team.Members">
            <MemberTable Team="Team" CreateTeamMember="@CreateTeamMember"/>
        </TabPage>
    </TabControl>
}

@code {

    [Parameter] public RenderFragment ChildContent { get; set; }

    [Parameter] public Guid TeamId { get; set; }

    [Parameter] public string Tab { get; set; }
    [Parameter] public SurveyTableFeatureFlags? SurveyFlags { get; set; }
    private string _generalResultsColumnChartId = "general-results-column-chart";

    public Team? Team { get; set; }

    private List<string> Emails { get; set; } = new();

    private List<Survey>? Surveys { get; set; }
    
    private GeneralResultsDto? GeneralResults { get; set; }

    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await FetchTeam();
        Emails = Team!.Members.Select(m => m.Email).ToList();
        Surveys = await SurveyService.GetAllSurveysByTeam(TeamId);
        GeneralResults = await AnalysisService.GetGeneralResults(TeamId);
    }


    private async Task FetchTeam()
    {
        Team = await TeamDataService.GetTeamById(TeamId);
        StateHasChanged();
    }

    private async Task CreateTeamMember(AddTeamMemberDto addTeamMemberDto)
    {
        // Create member
        await TeamDataService.AddTeamMember(addTeamMemberDto);

        // Re-fetch team
        await FetchTeam();
        
        ToastService.ShowSuccess("Team Member created successfully");
    }


    private async Task DownloadSurveyResponses(Survey survey)
    {
        try
        {
            var surveyResponsesBytes = await SurveyService.DownloadSurveyResponses(survey.Id);
            await Js.InvokeVoidAsync("downloadFile", $"{survey.Title} responses.csv", "file/csv", surveyResponsesBytes);
        }
        catch (Exception error)
        {
            Console.WriteLine(error);
            NavigationManager.NavigateTo(NavigationManager.BaseUri + "error");
        }
    }

    private void RedirectToLaunchSurveyPage()
    {
        NavigationManager.NavigateTo(NavigationManager.BaseUri + "survey/delivery-settings?template=Hackman%20Model");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Js.InvokeVoidAsync("generateColumnsChart", _generalResultsColumnChartId, GeneralResults?.ColumnChart);
    }
}