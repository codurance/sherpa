@using SherpaFrontEnd.Model
@using SherpaFrontEnd.Services
@using SherpaFrontEnd.Shared.Modals
@using Microsoft.AspNetCore.Components.WebAssembly.Infrastructure
@using SherpaFrontEnd.Dtos.Team
@using SherpaFrontEnd.Core.Components
@inject ITeamDataService TeamDataService;

@inject NavigationManager _nav
@inject IJSRuntime JS
@inject NavigationManager NavManager

@page "/teams-list-page"

<div>

    <div class="flex justify-between mb-6">
        <MainHeading>All teams</MainHeading>
        <button class="bg-primary-red-principal-800 hover:bg-primary-red-900 rounded-lg px-6 py-2 text-white font-semibold text-base" onclick="@ShowFormContainer">
            <i class="las la-plus"></i>
            Create new team
        </button>
    </div>

    <CreateTeamOffcanvas CanvasId="@CanvasId"/>

    @if (Teams is not null && Teams.Count == 0)
    {
        <div class="text-center">
            <h3>You have no teams!</h3>
            <h3>Do you want to start creating one?</h3>
        </div>
    }

    @if (Teams is not null && Teams.Count != 0)
    {
        <div class="flex flex-wrap justify-between">
            @foreach (var team in Teams)
            {
                <div @onclick="@(() => _nav.NavigateTo($"/team-content/{team.Id}"))" class="bg-white hover:cursor-pointer flex-[0_0_100%] md:flex-[0_0_48%] lg:flex-[0_0_32%] rounded-3xl mb-3 flex items-center px-8 py-6 border-gray-inner-shadow border-b-2 hover:outline hover:outline-2 outline-gray-inner-shadow">
                        <h2 class="text-2xl text-primary-dark-principal font-normal">@team.Name</h2>
                </div>
            }
        </div>
    }

    @if (Teams is null)
    {
        <h3>An error has occured - try again later</h3>
    }

</div>

@code {
    public const string CanvasId = "create-new-team-form";

    public List<Team> Teams { get; set; } = new List<Team>();

    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    public async void ShowFormContainer()
    {
        await JS.InvokeVoidAsync("showOffCanvas", CanvasId);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Teams = await TeamDataService.GetAllTeams();
        }
        catch
        {
            var errorUri = NavManager.BaseUri + $"error";
            NavManager.NavigateTo(errorUri);
        }
    }

}