@using SherpaFrontEnd.Model
@using SherpaFrontEnd.Services
@using SherpaFrontEnd.Shared.Modals
@using Microsoft.AspNetCore.Components.WebAssembly.Infrastructure
@using SherpaFrontEnd.Dtos.Team
@using SherpaFrontEnd.Core.Components
@inject ITeamDataService TeamDataService;

@inject NavigationManager _nav
@inject IJSRuntime JS
@inject NavigationManager NavManager

@page "/teams-list-page"

<div>
    
    <div class="flex justify-between">
        <MainHeading>All teams</MainHeading>
        <button class="w-25 btn btn-outline-primary" onclick="@ShowFormContainer">Create new team</button>
    </div>

    <CreateTeamOffcanvas CanvasId="@CanvasId"/>

    @if (Teams is not null && Teams.Count == 0)
    {
        <div class="text-center">
            <h3>You have no teams!</h3>
            <h3>Do you want to start creating one?</h3>
        </div>
    }

    @if (Teams is not null && Teams.Count != 0)
    {
        foreach (var team in Teams)
        {
            <div class="card my-2" style="width: 18rem;" @onclick="@(() => _nav.NavigateTo($"/team-content/{team.Id}"))">
                <div class="card-body">
                    <h5 class="card-title">@team.Name</h5>
                </div>
            </div>
        }
    }

    @if (Teams is null)
    {
        <h3>An error has occured - try again later</h3>
    }

</div>

@code {
        public const string CanvasId = "create-new-team-form";

    public List<Team> Teams { get; set; } = new List<Team>();

    [CascadingParameter]
    public IModalService Modal { get; set; } = default!;

    public async void ShowFormContainer()
    {
        await JS.InvokeVoidAsync("showOffCanvas", CanvasId);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Teams = await TeamDataService.GetAllTeams();
        }
        catch
        {
            var errorUri = NavManager.BaseUri + $"error";
            NavManager.NavigateTo(errorUri);
        }
    }

}