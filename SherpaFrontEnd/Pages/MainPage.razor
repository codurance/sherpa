@using SherpaFrontEnd.Services
@using SherpaFrontEnd.Model
@inject IGroupDataService GroupDataService;
@inject IAssessmentsDataService AssessmentsDataService;

@page "/main-page"

<div class="row">
    <div class="col-3">
        <GroupsList Groups="@Groups"
                    OnGroupClick="UpdateSelectedGroup"
                    OnAddGroup="AddGroup"
                    OnDeleteGroup="DeleteSelectedGroup"
                    SelectedGroupId="@SelectedGroupId"/>
    </div>
    <div class="col-9">
        @if (Groups is not null)
        {
            var emails = Groups.First(g => g.Id.Equals(SelectedGroupId)).Members.Select(m => m.Email).ToList();
            <GroupContent Group="@Groups.FirstOrDefault(g => g.Id == SelectedGroupId)"
                          OnUpdateGroup="SaveGroup"
                          SelectedGroupAssessments="@SelectedGroupAssessments"
                          SurveyTemplates="@SurveyTemplates"
                          Emails="@emails"
                          OnAddSurvey = "@OnAddSurvey"
                          OnCreateEvaluation="OnUpdateAssessment"
                          OnDeleteEvaluation="OnUpdateAssessment">
                >
            </GroupContent>
        }
    </div>
</div>

@code {
    private List<Group>? Groups { get; set; }
    private Guid SelectedGroupId { get; set; }
    private List<GroupMember>? SelectedGroupMembers { get; set; }
    
    public List<Assessment>? Assessments { get; set; } = new ();
    public List<Assessment>? SelectedGroupAssessments { get; set; }
    private List<SurveyTemplate> SurveyTemplates { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetGroups();
        await GetAssessments();
        await GetTemplates();
    }

    private async Task GetGroups()
    {
        try
        {
            var requestedGroups = await GroupDataService.GetGroups();

            if (requestedGroups != null)
            {
                Groups = requestedGroups;
                SelectedGroupMembers = Groups.First().Members;
                SelectedGroupId = Groups.First().Id;
            }
        }
        catch (HttpRequestException e)
        {
        // TODO exception component?
        }
    }
    
    private void UpdateSelectedGroup(Guid id)
    {
        if (Groups is not null)
        {
            SelectedGroupMembers = Groups.First(group => group.Id.Equals(id)).Members;
            SelectedGroupId = id;
            SetAssessmentsForSelectedGroup();
        }
    }

    private async Task AddGroup(Group group)
    {
        await GroupDataService.AddGroup(group);
        await GetGroups();
    }

    private async Task DeleteSelectedGroup()
    {
        if (Groups is not null && Groups.Any(g => g.Id == SelectedGroupId))
        {
            await GroupDataService.DeleteGroup(SelectedGroupId);
            Groups.Remove(Groups.First(group => group.Id.Equals(SelectedGroupId)));

            var selectedGroup = Groups.FirstOrDefault();
            if (selectedGroup is not null)
            {
                SelectedGroupId = selectedGroup.Id;
                SelectedGroupMembers = selectedGroup.Members;
            }
            else
            {
                SelectedGroupId = Guid.Empty;
                SelectedGroupMembers = new List<GroupMember>();
            }
        }
    }

    private async Task SaveGroup(Group group)
    {
        await GroupDataService.PutGroup(group);
    }
    
    private async Task GetTemplates()
    {
        SurveyTemplates = await AssessmentsDataService.GetTemplates();
    }

    private async Task GetAssessments()
    {
        var assessments = await AssessmentsDataService.GetAssessments();

        SelectedGroupAssessments = new List<Assessment>();
        
        if (assessments is {Count: > 0 })
        {
            Assessments = assessments;
            SetAssessmentsForSelectedGroup();
        }
    }

    private void SetAssessmentsForSelectedGroup()
    {
        var groupedAssessments = Assessments.GroupBy(assessment => assessment.GroupId);
        
        if (groupedAssessments.Any(a => a.Key == SelectedGroupId))
        {
            SelectedGroupAssessments = groupedAssessments.First(a => a.Key.Equals(SelectedGroupId)).ToList();
            Console.WriteLine(SelectedGroupAssessments.Count);
            return;
        }

        SelectedGroupAssessments = new List<Assessment>();
    }
    
    private async Task OnAddSurvey(SurveyTemplate template)
    {
        Console.WriteLine("OnAdd");
        var assessmentName = $"{template.Name} {DateTime.Now}";
        var assessment = await AssessmentsDataService.AddAssessment(SelectedGroupId, template.Id, assessmentName);

        if (assessment is not null)
        {
            Assessments.Add(assessment);
            SetAssessmentsForSelectedGroup();
        }
    }

    private async Task OnUpdateAssessment(Assessment assessment)
    {
        await AssessmentsDataService.PutAssessment(assessment);
    }
}