@page "/survey/delivery-settings"
@using SherpaFrontEnd.Dtos
@using SherpaFrontEnd.Model
@using SherpaFrontEnd.Services
@inject NavigationManager NavManager
@inject ITeamDataService TeamDataService
@inject IGuidService GuidService
@inject ISurveyService SurveyService

<div class="flex-1 bg-gray-100 p-8">
    <h2 class="mb-8 text-black font-semibold text-title-h2--semibold">Send template survey</h2>

    <EditForm EditContext="EditContext" OnValidSubmit="@CreateSurvey">
        <div class="rounded-2xl border border-gray-200 px-12 bg-gray-white divide-y divide-primary-dark-100">
            <DataAnnotationsValidator/>
            <div class="flex py-10">
                <div class="w-1/3">
                    <h3 class="text-title-h3 text-primary-dark-principal">Select team</h3>
                </div>
                <div class="flex w-2/3 flex-col">
                    <label for="survey-team-id" class="text-text-label text-primary-dark-principal">Team</label>
                    <div class="max-w-xs flex flex-col relative mb-1">
                        <InputSelect id="survey-team-id" @bind-Value="CreateSurveyDto.TeamId" class="z-2 text-primary-dark-principal w-full rounded-lg border border-gray-300 shadow-sm py-2.5 px-3.5 appearance-none relative">
                            <option disabled selected="selected">Select a team</option>
                            @if (Teams != null)
                            {
                                @foreach (var team in Teams)
                                {
                                    <option class="text-primary-dark-principal" value="@team.Id">
                                        @team.Name <span class="text-primary-dark-300">(@team.Members.Count members)</span>
                                    </option>
                                }
                            }
                        </InputSelect>
                        <i class="las la-angle-down text-black absolute top-3.5 right-4"></i>
                    </div>
                    <ValidationMessage For="@(() => CreateSurveyDto.TeamId)"/>
                </div>
            </div>

            <div class="flex py-10">
                <div class="flex w-1/3 flex-col">
                    <h3 class="text-title-h3 text-primary-dark-principal">Introduce the survey to your team</h3>
                    <p class="mt-3 text-text-body-14pt-regular text-primary-dark-400">This information will be visible to recipients</p>
                </div>
                <div class="flex w-2/3 flex-col">
                    <div class="flex flex-col">
                        <label for="survey-title-input" class="text-text-label text-primary-dark-principal">Survey title</label>
                        <div class="max-w-xs relative">
                            <InputText id="survey-title-input" @bind-Value="CreateSurveyDto.Title" class="w-full rounded-lg border border-gray-300 shadow-sm py-2.5 px-3.5 mb-1"/>
                            @if (!IsInvalid(nameof(CreateSurveyDto.Title)))
                            {
                                <i class="las la-exclamation-circle absolute text-red-500 text-2xl top-2 right-3"></i>
                            }
                        </div>
                        <ValidationMessage For="@(() => CreateSurveyDto.Title)"/>
                    </div>
                    <div class="mt-5 flex flex-col">
                        <label for="survey-description-input" class="text-text-label text-primary-dark-principal">Description</label>
                        <InputTextArea rows="5" id="survey-description-input" @bind-Value="CreateSurveyDto.Description" class="rounded-lg border border-gray-300 shadow-sm py-2.5 px-3.5"/>
                    </div>
                </div>
            </div>

            <div class="flex py-10">
                <div class="flex w-1/3 flex-col">
                    <h3 class="text-title-h3 text-primary-dark-principal">Survey delivery</h3>
                    <p class="mt-3 text-text-body-14pt-regular text-primary-dark-400">Schedule when to deliver the survey</p>
                </div>
                <div class="flex w-2/3 flex-col">
                    <p class="mb-5 font-semibold text-text-body-14pt-bold text-primary-dark-principal">This survey will end:</p>
                    <div>
                        <label for="survey-deadline-input" class="mr-7 text-text-label text-primary-dark-principal">On a specific date</label>
                        <InputDate id="survey-deadline-input" @bind-Value="CreateSurveyDto.Deadline" class="rounded-lg border border-gray-300 shadow-sm py-2.5 px-3.5"/>
                    </div>
                </div>
            </div>

        </div>
        <div class="mt-9 flex w-full justify-end" role="group">
            <button type="submit" class="flex items-center gap-2 rounded-lg px-6 py-2 text-base text-white bg-primary-red-principal-800 hover:bg-primary-red-900">
                <span>Continue</span><i class="las la-angle-right"></i>
            </button>
        </div>
    </EditForm>


</div>

@code {

    [SupplyParameterFromQuery]
    [Parameter]
    public string? Template { get; set; }

    private CreateSurveyDto CreateSurveyDto { get; set; } = new();

    public IEnumerable<Team>? Teams { get; set; }

    public EditContext? EditContext;


    protected override async Task OnInitializedAsync()
    {
        EditContext = new EditContext(CreateSurveyDto);

        CreateSurveyDto.SurveyId = GuidService.GenerateRandomGuid();
        if (Template != null)
        {
            CreateSurveyDto.TemplateName = Template;
        }
        CreateSurveyDto.Description = null;
        CreateSurveyDto.Deadline = null;
        CreateSurveyDto.TeamId = null;

        try
        {
            Teams = await FetchAllTeams();
        }
        catch
        {
            NavManager.NavigateTo(NavManager.BaseUri + "error");
        }
    }

    private async Task<List<Team>> FetchAllTeams()
    {
        return await TeamDataService.GetAllTeams();
    }


    private async Task CreateSurvey()
    {
        try
        {
            await SurveyService.CreateSurvey(CreateSurveyDto);
            NavManager.NavigateTo(NavManager.BaseUri + $"survey/draft-review/{CreateSurveyDto.SurveyId.ToString()}");
        }
        catch
        {
            NavManager.NavigateTo(NavManager.BaseUri + "error");
        }
    }

    private bool IsInvalid(string? field)
    {
        if (field == null || EditContext == null)
        {
            Console.WriteLine("Field is null");
            return false;
        }

        var anyValidationMessages = EditContext.GetValidationMessages(new FieldIdentifier(CreateSurveyDto, field)).Any();

        Console.WriteLine("IsValid: " + !anyValidationMessages);

        return !anyValidationMessages;
    }

}