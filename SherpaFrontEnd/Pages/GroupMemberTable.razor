@page "/group-members"
@using SherpaFrontEnd.Model
@using Microsoft.AspNetCore.Components
@using SherpaFrontEnd.Shared.Modals
@using SherpaFrontEnd.ViewModel

<h3>GroupMemberTable</h3>

<table class="table table-striped">
    <thead>
    <tr>
        <th scope="col">Name</th>
        <th scope="col">Last Name</th>
        <th scope="col">Position</th>
        <th scope="col">Email</th>
        <th scope="col"></th>
    </tr>
    </thead>
    @if (Group is not null && Group.Members.Any())
    {
        <tbody>
        @foreach (var currentMember in Group.Members)
        {
            <tr id="@currentMember.Email">
                <ReadonlyGroupMemberRow GroupMember="@currentMember" OnSaveMember="UpdateGroupMember" OnDeleteMember="DeleteGroupMember"></ReadonlyGroupMemberRow>
            </tr>
        }
        </tbody>
    }
</table>

<div>
    <button class="w-50 btn btn-outline-primary btn-sm" @onclick="AddGroupMember">Add</button>
</div>

@code {

    private Group? _group;

    [Parameter]
    public Group? Group
    {
        get => _group;
        set
        {
            if (value is null)
            {
                return;
            }

            _group = value;
            _group.Members.Sort((m1, m2) =>
                string.Compare(m1.LastName, m2.LastName, StringComparison.Ordinal));
        }
    }

    [Parameter]
    public EventCallback<Group> OnUpdateGroup { get; set; }

    [CascadingParameter]
    public IModalService Modal { get; set; } = default!;

    private async Task UpdateGroupMember()
    {
        Console.WriteLine(Group?.Members);
        await OnUpdateGroup.InvokeAsync(Group);
    }

    private async Task DeleteGroupMember(string memberEmail)
    {
        Group?.Members.Remove(Group.Members.First(m => m.Email == memberEmail));
        await OnUpdateGroup.InvokeAsync(Group);
    }


    private async Task AddGroupMember()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(EditMemberModal.GroupMember), new GroupMember());

        var modal = Modal.Show<EditMemberModal>("Add member", parameters);
        var modalResult = await modal.Result;

        if (!modalResult.Cancelled)
        {
            var groupMemberToAdd = (EditGroupMember)modalResult.Data;
            if (_group is not null)
            {
                _group.Members.Add(new GroupMember
                {
                    Name = groupMemberToAdd.Name,
                    LastName = groupMemberToAdd.LastName,
                    Position = groupMemberToAdd.Position,
                    Email = groupMemberToAdd.Email
                });
                await OnUpdateGroup.InvokeAsync(Group);
            }
        }
    }

}