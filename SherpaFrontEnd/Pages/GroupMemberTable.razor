@page "/group-members"
@using SherpaFrontEnd.Model
@using Microsoft.AspNetCore.Components

<h3>GroupMemberTable</h3>

<table class="table table-striped">
    <thead>
    <tr>
        <th scope="col">Name</th>
        <th scope="col">Last Name</th>
        <th scope="col">Position</th>
        <th scope="col">Email</th>
        <th scope="col"></th>
    </tr>
    </thead>
    @if (Group.Members is not null || Group.Members.Any())
    {
        <tbody>
        @foreach (var currentMember in Group.Members)
        {
            <tr id="@currentMember.Email">
                @if (currentMember.IsEditable)
                {
                    <EditableGroupMemberRow GroupMember="@currentMember" OnSaveMember="UpdateGroupMember" OnDeleteMember="DeleteGroupMember"></EditableGroupMemberRow>
                }
                else
                {
                    <ReadonlyGroupMemberRow GroupMember="@currentMember" OnEditMember="EditGroupMember" OnDeleteMember="DeleteGroupMember"></ReadonlyGroupMemberRow>
                }
            </tr>
        }
        </tbody>
    }
</table>

<div>
    <button class="w-50 btn btn-outline-primary btn-sm">Add</button>
</div>

@code {

    private Group? _group;

    [Parameter]
    public Group? Group
    {
        get => _group;
        set
        {
            if (value is null)
            {
                return;
            }
            
            _group = value;
            _group.Members?.Sort((m1, m2) =>
                    string.Compare(m1.LastName, m2.LastName, StringComparison.Ordinal));
        } 
    }
    
    [Parameter]
    public EventCallback<Group> OnUpdateGroup { get; set; }

    private async Task UpdateGroupMember()
    {
        await OnUpdateGroup.InvokeAsync(Group);
    }

    private void EditGroupMember()
    {
    }

    private async Task DeleteGroupMember(string memberEmail)
    {
        Group?.Members?.Remove(Group.Members.First(m => m.Email == memberEmail));
        await OnUpdateGroup.InvokeAsync(Group);
    }

}