@using SherpaFrontEnd.Services
@using SherpaFrontEnd.Model
@inject IGroupDataService GroupDataService;
@page "/groups-page"

<div>
    <div class="row">
        <div class="col-3">
            <GroupsList Groups="@Groups" 
                        OnGroupClick="UpdateSelectedGroup"
                        OnAddGroup="AddGroup"
                        OnDeleteGroup="DeleteSelectedGroup"
                        SelectedGroupId="@SelectedGroupId"/>
        </div>
        <div class="col-9">
            @if (Groups is not null)
            {
                <GroupMemberTable Group="@(Groups.FirstOrDefault(g => g.Id == SelectedGroupId))" OnUpdateGroup="SaveGroup"/>
            }
        </div>
    </div>
</div>

@code {
    
    public List<Group>? Groups { get; private set; }

    public Guid SelectedGroupId {  get; private set; }
    public List<GroupMember>? SelectedGroupMembers { get; private set; }

    protected override async Task OnInitializedAsync()
    {
        await GetGroups();
    }

    private async Task GetGroups()
    {
        try
        {
            var requestedGroups = await GroupDataService.GetGroups();

            if (requestedGroups != null)
            {
                Groups = requestedGroups;
                SelectedGroupMembers = Groups.First().Members;
                SelectedGroupId = Groups.First().Id;
            }
        }
        catch (HttpRequestException e)
        {
    // TODO exception component?
        }
    }

    protected void UpdateSelectedGroup(Guid id)
    {
        SelectedGroupMembers = Groups.First(group => group.Id.Equals(id)).Members;
        SelectedGroupId = id;
    }

    private async Task AddGroup(string groupName)
    {
        await GroupDataService.AddGroup(groupName);
        await GetGroups();
    }

    private async Task DeleteSelectedGroup()
    {
        if (Groups.Any(g => g.Id == SelectedGroupId))
        {
            await GroupDataService.DeleteGroup(SelectedGroupId);
            Groups.Remove(Groups.First(group => group.Id.Equals(SelectedGroupId)));
            SelectedGroupMembers = new List<GroupMember>();
        }
    }

    private async Task SaveGroup(Group group)
    {
        await GroupDataService.PutGroup(group);
    }

}