@page "/answer-survey/{surveyNotificationId:guid}"
@using SherpaFrontEnd.Dtos
@using SherpaFrontEnd.Dtos.Survey
@using SherpaFrontEnd.Services
@using SherpaFrontEnd.Core.Layout
@using SherpaFrontEnd.Pages.SurveyQuestions.Components
@inject ISurveyService SurveyService
@inject ICachedResponseService CachedResponseService
@inject NavigationManager NavigationManager
@layout PublicAccessLayout

<PageTitle>Sherpa: assessment</PageTitle>

<div class="flex flex-col items-center">
    @if (_isComplete)
    {
        <ThankYouMessage SelectedLanguage="@_selectedLanguage"/>
    }
    else if (_isError)
    {
        <div class="mt-10 mb-8 flex w-3/4 flex-col rounded-lg border bg-white px-16 py-10 max-w-[740px] border-primary-dark-100 relative">
            <i class="las la-exclamation-circle text-red-500 text-4xl font-bold absolute top-2 right-3"></i>
            <h1 class="text-2xl mb-2">Unable to submit survey response</h1>
            <p>
                Please contact your coach
            </p>
        </div>
    }
    else
    {
        <select @bind="_selectedLanguage" class="absolute top-2 right-2 border-0 bg-transparent">
            <option value="@Languages.ENGLISH">English</option>
            <option value="@Languages.SPANISH">Spanish</option>
        </select>
        @if (_survey != null)
        {
            <div class="mt-6 mb-8 flex w-3/4 flex-col rounded-lg border bg-white py-10 max-w-2xl border-primary-dark-100">
                <h2 class="mb-2 text-2xl text-primary-dark-principal font-semibold">@_survey.Title</h2>
                <p class="text-primary-dark-principal">
                    @foreach (var line in _survey.Description.Split("\n"))
                    {
                        @line
                        <br/>
                    }
                </p>
            </div>
        }


        @if (_questions != null)
        {
            <form id="survey" class="rounded-lg border bg-white py-2 pb-10 w-3/4 max-w-2xl border-primary-dark-100" @onsubmit="SubmitAction">
                @foreach (var question in _questions.OrderBy(q => q.Position))
                {
                    <fieldset class="flex flex-col items-center">

                        <legend class="self-start font-bold text-[#1D233C] mb-4 mt-14 text-left text-sm">
                            @(_questions.OrderBy(q => q.Position).ToList().IndexOf(question) + 1). @question.Statement[_selectedLanguage]
                        </legend>

                        <div class=@($"flex {@GetFlexDirection(question)} w-full justify-between p-1 border border-primary-dark-200 rounded-md divide-x divide-primary-dark-100 self-center")>
                            @foreach (var response in question.Responses[_selectedLanguage])
                            {
                                <div class="flex flex-1">
                                    <input
                                        class="absolute opacity-0 peer"
                                        type="radio"
                                        data-testid="@(GetDataTestId(question, response))"
                                        id="@question.Position-@Array.IndexOf(question.Responses[_selectedLanguage], @response)"
                                        name="@question.Position" value="@response" required
                                        @onchange="() => SaveResponse(question, response)"
                                        checked="@(IsResponseChecked(question, response))">
                                    <label class="flex-1 py-2 px-2 text-primary-dark-principal peer-checked:peer-focus:text-white peer-checked:text-white hover:bg-primary-dark-100 peer-focus:text-primary-dark-principal peer-active:bg-primary-dark-100 peer-focus:bg-primary-dark-100 peer-checked:peer-focus:bg-[#1D233C] peer-checked:bg-[#1D233C] rounded-md text-center" for="@question.Position-@Array.IndexOf(question.Responses[_selectedLanguage], @response)">@response</label>
                                </div>
                            }

                        </div>
                        <div class="flex w-full justify-between">
                            @foreach (var footLabel in GetFootLabels(question))
                            {
                                <p class="flex-1 py-2 px-2 text-primary-dark-principal text-center text-[10px] sm:text-xs">@footLabel</p>
                            }
                        </div>

                    </fieldset>
                }
            </form>
            <div class="flex justify-center py-6 w-3/4 max-w-[740px]">
                <button form="survey" type="submit" class="bg-primary-red-principal-800 hover:bg-primary-red-900 rounded-lg px-6 text-white text-base font-bold py-2">Submit</button>
            </div>
        }
    }

</div>


@code {

    [Parameter] public Guid SurveyNotificationId { get; set; }

    private Guid _surveyId;
    private Guid _memberId;

    private SurveyWithoutQuestions? _survey;
    private List<Question>? _questions;
    private string _selectedLanguage = Languages.ENGLISH;
    private Dictionary<int, string> Responses;
    private bool _isComplete = false;
    private bool _isError = false;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var surveyNotification = await SurveyService.GetSurveyNotificationById(SurveyNotificationId);
            Responses = await CachedResponseService.GetBy(SurveyNotificationId);
            _surveyId = surveyNotification.SurveyId;
            _memberId = surveyNotification.TeamMemberId;
            _survey = await SurveyService.GetSurveyWithoutQuestionsById(_surveyId);
            _questions = await SurveyService.GetSurveyQuestionsBySurveyId(_surveyId);
        }
        catch
        {
            NavigationManager.NavigateTo(NavigationManager.BaseUri + "error");
        }
    }
    
    private void SaveResponse(Question question, string response)
    {
        Responses[question.Position] = response;
        CachedResponseService.Save(SurveyNotificationId, Responses);
    }

    private string GetFlexDirection(IQuestion question)
    {
        return question.Responses[_selectedLanguage][0].Length > 5 ? "flex-col" : "flex-row";
    }

    private IEnumerable<string> GetFootLabels(Question question)
    {
        var isShortAnswer = question.Responses[Languages.ENGLISH][0].Length < 5;
        var questionHasFiveAnswers = question.Responses[Languages.ENGLISH].Length == 5;
        var questionHasFourAnswers = question.Responses[Languages.ENGLISH].Length == 4;


        if (question is { Component: HackmanComponent.ExpertCoaching, Subcomponent: HackmanSubComponent.Overall } && IsEnglish())
        {
            return new[] { "Very unhelpful", "Unhelpful", "Neutral", "Helpful", "Very helpful" };
        }

        if (question is { Component: HackmanComponent.ExpertCoaching, Subcomponent: HackmanSubComponent.Overall } && IsSpanish())
        {
            return new[] { "Muy poco útil", "Poco útil", "Neutro", "Útil", "Muy útil" };
        }

        if (isShortAnswer && questionHasFiveAnswers && IsEnglish())
        {
            return new[] { "Strongly Disagree", "Disagree", "Neutral", "Agree", "Strongly Agree" };
        }

        if (isShortAnswer && questionHasFiveAnswers && IsSpanish())
        {
            return new[] { "Totalmente en desacuerdo", "En desacuerdo", "Neutral", "De acuerdo", "Totalmente de acuerdo" };
        }

        if (isShortAnswer && questionHasFourAnswers && IsEnglish())
        {
            return new[] { "Strongly Disagree", "Disagree", "Agree", "Strongly Agree" };
        }

        if (isShortAnswer && questionHasFourAnswers && IsSpanish())
        {
            return new[] { "Totalmente en desacuerdo", "En desacuerdo", "De acuerdo", "Totalmente de acuerdo" };
        }

        return Array.Empty<string>();
    }

    private bool IsSpanish()
    {
        return _selectedLanguage == Languages.SPANISH;
    }

    private bool IsEnglish()
    {
        return _selectedLanguage == Languages.ENGLISH;
    }

    private async Task SubmitAction()
    {
        var questionResponses = Responses.Select(pair => new QuestionResponse(pair.Key, pair.Value)).ToList();
        var answerSurveyDto = new AnswerSurveyDto(_memberId, _surveyId, new SurveyResponse(_memberId, questionResponses));

        try
        {
            await SurveyService.SubmitSurveyResponse(answerSurveyDto);
            _isComplete = true;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            _isError = true;
        }
    }
    
    private bool IsResponseChecked(Question question, string response)
    {
        if (Responses.ContainsKey(question.Position))
        {
            return Responses[question.Position] == response;
        }

        return false;
    }

    private string GetDataTestId(Question question, string response)
    {
        return IsResponseChecked(question, response) ? "checked" : "unchecked";
    }

}