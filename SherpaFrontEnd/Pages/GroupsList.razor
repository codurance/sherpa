@using SherpaFrontEnd.Model
@using SherpaFrontEnd.Services
@using SherpaFrontEnd.Shared.Modals
@inject IGroupDataService GroupDataService;

@inject NavigationManager _nav

@page "/groups-list-page"

<div class="codurance-light-gray groups-list">
    
    @if (Groups is not null && Groups.Count == 0)
    {
        <div class="text-center">
            <h3>You have no teams!</h3>
            <h3>Do you want to start creating one?</h3>
            <button class="btn-outline-primary" @onclick="AddGroup">New team!</button>
        </div>
    }
    
    @if (Groups is not null)
    {
        <h3>Your teams!</h3>
    
        <button class="btn-outline-primary" @onclick="AddGroup">Add new team</button>
    
        foreach (var group in Groups)
        {
            <div class="card" style="width: 18rem;" @onclick="@(() => _nav.NavigateTo($"/group/{group.Id}"))">
                <div class="card-body">
                    <h5 class="card-title">@group.Name</h5>
                    <p class="card-text">Overall scoring in analysis</p>
                </div>
            </div>
        }
    }
    else
    {
        <h3>An error has occured - try again later</h3>
    }
</div>

@code {

    public List<Group>? Groups { get; set; }

    [CascadingParameter]
    public IModalService Modal { get; set; } = default!;

    private async Task AddGroup()
    {
        var modal = Modal.Show<AddGroupModal>("Add group");
        var modalResult = await modal.Result;

        if (modalResult.Cancelled)
        {
            return;
        }
        
        var group = (Group)modalResult.Data;


        if (Groups is not null)
        {
            if (Groups.Any(g => g.Name == group.Name))
            {
                Modal.Show<WarningModal>("Group name must be unique");
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Groups = await GroupDataService.GetGroups();
    }

}