@using SherpaFrontEnd.Model
@using SherpaFrontEnd.Services

<h3>GroupsList</h3>

@if (Groups is not null)
{
    @foreach (var group in Groups)
    {
        <div class="form-check">
            @if (group.Id == SelectedGroupId)
            {
                <input class="form-check-input" type="radio"
                       name="flexRadioDefault" @onclick="@(() => Group_Click(group.Id))"
                       id="@group.Id" checked="checked">
            }
            else
            {
                <input class="form-check-input" type="radio"
                       name="flexRadioDefault" @onclick="@(() => Group_Click(group.Id))"
                       id="@group.Id">
            }
            <label class="form-check-label" for="@group.Id">
                @group.Name
            </label>
        </div>
    }
}
else
{
    <h3>An error has occured - try again later</h3>
}
<div class="btn-group w-100 mt-5" role="group">
    <button class="w-50 btn btn-outline-primary btn-sm">Add</button>
    <button class="w-50 btn btn-outline-danger btn-sm" @onclick="DeleteGroup">Delete</button>
</div>


@code {

    [Parameter]
    public List<Group>? Groups { get; set; }

    [Parameter]
    public EventCallback<Guid> OnGroupClick { get; set; }

    [Parameter]
    public EventCallback OnDeleteGroup { get; set; }


    [Parameter]
    public Guid SelectedGroupId { get; set; }

    [CascadingParameter]
    public IModalService Modal { get; set; } = default!;

    protected async Task Group_Click(Guid id)
    {
    //SelectedGroupId = id;
        await OnGroupClick.InvokeAsync(id);
    }

    private async Task DeleteGroup()
    {
        var modal = Modal.Show<ConfirmationModal>("Delete group?");
        var modalResult = await modal.Result;

        if (!modalResult.Cancelled)
        {
            await OnDeleteGroup.InvokeAsync();
        }
    }
}