@using SherpaFrontEnd.Model
@using SherpaFrontEnd.Services
@using SherpaFrontEnd.Shared.Modals
<div class="codurance-light-gray groups-list">
    @if (Groups is not null)
    {
        <div class="groups-box">
            <ul>
            @foreach (var group in Groups)
            {
                    @if (group.Id == SelectedGroupId)
                    {
                        <li class="selected" @onclick="@(() => Group_Click(group.Id))">
                            @group.Name
                        </li>
                    }
                    else
                    {
                        <li @onclick="@(() => Group_Click(group.Id))">
                            @group.Name
                        </li>
                    }
            }
            </ul>
        </div>
    }
    else
    {
        <h3>An error has occured - try again later</h3>
    }
    
    <div class="btn-group-vertical">
        <button class="btn btn-edit" @onclick="AddGroup">
            <span class="oi oi-plus"></span>
            <span>Add Group</span>
        </button>
        <button class="btn btn-remove" @onclick="DeleteGroup">
            <span class="oi oi-trash"></span>
            <span>Delete Group
            </span>
        </button>
    </div>

</div>

@code {

    [Parameter]
    public List<Group>? Groups { get; set; }

    [Parameter]
    public EventCallback<Guid> OnGroupClick { get; set; }

    [Parameter]
    public EventCallback<Group> OnAddGroup { get; set; }

    [Parameter]
    public EventCallback OnDeleteGroup { get; set; }


    [Parameter]
    public Guid SelectedGroupId { get; set; }

    [CascadingParameter]
    public IModalService Modal { get; set; } = default!;

    private async Task Group_Click(Guid id)
    {
    //SelectedGroupId = id;
        await OnGroupClick.InvokeAsync(id);
    }

    private async Task AddGroup()
    {
        var modal = Modal.Show<AddGroupModal>("Add group");
        var modalResult = await modal.Result;

        if (modalResult.Cancelled)
        {
            return;
        }
        
        var group = (Group)modalResult.Data;


        if (Groups is not null)
        {
            if (Groups.Any(g => g.Name == group.Name))
            {
                Modal.Show<WarningModal>("Group name must be unique");
                return;
            }
            
            await OnAddGroup.InvokeAsync(group);
        }
    }
    
    private async Task DeleteGroup()
    {
        var modal = Modal.Show<ConfirmationModal>("Delete group?");
        var modalResult = await modal.Result;

        if (!modalResult.Cancelled)
        {
            await OnDeleteGroup.InvokeAsync();
        }
    }

}