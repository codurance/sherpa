@using SherpaFrontEnd.Model
@using SherpaFrontEnd.Services
@using SherpaFrontEnd.Shared.Modals
@using SherpaFrontEnd.Shared.Tabs
@using SherpaFrontEnd.Dtos.Survey
@using SherpaFrontEnd.Pages
@using System.Net
@inject NavigationManager Nav
@inject ITeamDataService TeamDataService
@inject IAssessmentsDataService AssessmentsDataService
@inject ISurveyService SurveyService

@page "/team-content/{teamId:guid}"

<h3>
    @Team?.Name
</h3>
    <button class="btn btn-remove" title="Delete team" @onclick="DeleteTeam">
        <span class="oi oi-trash"></span>
    </button>


<TabControl>
    <TabPage Text="Analysis">
        <button>Send a new survey</button>
    </TabPage>
    <TabPage Text="Surveys">
        @if (Surveys != null && Surveys.Count > 0)
        {
            <h3>All Surveys</h3>
            <button type="button" class="focus:outline-none text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 mr-2 mb-2 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-900">Send new survey</button>
            @foreach (var survey in Surveys)
            {
                <div class="bg-white p-4 shadow rounded-lg mb-4">
                    <h4 class="text-lg font-semibold">@survey.Title</h4>
                    <p>@survey.Description</p>
                </div>
            }
            <UserTable Surveys="Surveys"/>
        }
        @if (Surveys != null && Surveys.Count == 0)
        {
            <div class="py-5 flex justify-center items-center flex-col bg-indigo-50 rounded-3xl gap-2.5">
                <h2>You donâ€™t have any surveys yet</h2>
                <p>Let's begin the journey towards a stronger, more effective team!</p>
                <button type="button" class="focus:outline-none text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 mr-2 mb-2 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-900">Send first survey</button>
            </div>
        }
    </TabPage>
    <TabPage Text="Assessments">
        <Assessments
            SurveyTemplates="@SurveyTemplates"
            SelectedTeamAssessments="@Assessments"
            SelectedTeamId="@Team?.Id"
            Emails="@Emails"
            OnAddSurvey="@OnAddSurvey"
            OnCreateEvaluation="@OnUpdateAssessment"
            OnDeleteEvaluation="@OnUpdateAssessment">
        </Assessments>
    </TabPage>
</TabControl>

@code {

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public Guid TeamId { get; set; }

    public Team? Team { get; set; }

    private List<string> Emails { get; set; } = new();

    private List<SurveyTemplate>? SurveyTemplates { get; set; }

    private List<Assessment>? Assessments { get; set; }

    private List<Survey>? Surveys { get; set; }

    [CascadingParameter]
    public IModalService Modal { get; set; } = default!;

    protected override async void OnParametersSet()
    {
        Team = await TeamDataService.GetTeamById(TeamId);
        Emails = Team!.Members.Select(m => m.Email).ToList();
        SurveyTemplates = await AssessmentsDataService.GetTemplates();
        Surveys = await SurveyService.GetAllSurveysByTeam(TeamId);
        Assessments = await AssessmentsDataService.GetAssessments(TeamId);
    }

    private async Task OnUpdateTeam(Team team)
    {
        await TeamDataService.PutTeam(team);
    }

    private async Task OnUpdateAssessment(Assessment assessment)
    {
        await AssessmentsDataService.PutAssessment(assessment);
    }

    private async Task OnAddSurvey(SurveyTemplate template)
    {
        var assessmentName = $"{template.Name} {DateTime.Now}";
        var assessment = await AssessmentsDataService.AddAssessment(TeamId, template.Id, assessmentName);

        if (assessment is not null)
        {
            Assessments!.Add(assessment);
        }
    }

    private async void DeleteTeam()
    {
        var modal = Modal.Show<ConfirmationModal>($"Delete {Team!.Name}?");
        var modalResult = await modal.Result;

        if (!modalResult.Cancelled)
        {
            var deleteStatus = await TeamDataService.DeleteTeam(TeamId);
            if (deleteStatus == HttpStatusCode.OK)
            {
                Nav.NavigateTo("/teams-list-page");
    //TODO alert (on teams page) successfully deleted
            }
    //TODO alert (on this page) team wasn't deleted
        }
    }

}