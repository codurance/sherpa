@using SherpaFrontEnd.Model
@using SherpaFrontEnd.Services
@using SherpaFrontEnd.Shared.Modals
@using SherpaFrontEnd.Shared.Tabs
@using System.Net
@inject NavigationManager Nav
@inject ITeamDataService TeamDataService
@inject IAssessmentsDataService AssessmentsDataService

@page "/team-content/{TeamId:guid?}"

    <h3>@Team?.Name
        <button class="btn btn-remove" title="Delete team" @onclick="DeleteTeam"><span class="oi oi-trash"></span></button>
    </h3>


<TabControl>
    <TabPage Text="Members">
        <Members
            Team="@Team"
            OnUpdateTeam="@OnUpdateTeam">
        </Members>
    </TabPage>
    <TabPage Text="Assessments">
        <Assessments
            SurveyTemplates="@SurveyTemplates"
            SelectedTeamAssessments="@Assessments"
            SelectedTeamId="@Team?.Id"
            Emails="@Emails"
            OnAddSurvey="@OnAddSurvey"
            OnCreateEvaluation="@OnUpdateAssessment"
            OnDeleteEvaluation="@OnUpdateAssessment">
        </Assessments>
    </TabPage>
</TabControl>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    
    [Parameter]
    public Guid TeamId { get; set; } = Guid.Empty;
    
    public Team? Team { get; set; }

    private List<string?> Emails { get; set; } = new();
    
    private List<SurveyTemplate>? SurveyTemplates { get; set; }
    
    private List<Assessment>? Assessments { get; set; }
    
    [CascadingParameter]
    public IModalService Modal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        Team = await TeamDataService.GetTeamById(TeamId);
        Emails = Team!.Members.Select(m => m.Email).ToList();
        SurveyTemplates = await AssessmentsDataService.GetTemplates();
        Assessments = await AssessmentsDataService.GetAssessments(TeamId);
    }
    
    private async Task OnUpdateTeam(Team team)
    {
        await TeamDataService.PutTeam(team);
    }
    
    private async Task OnUpdateAssessment(Assessment assessment)
    {
        await AssessmentsDataService.PutAssessment(assessment);
    }
    
    private async Task OnAddSurvey(SurveyTemplate template)
    {
        var assessmentName = $"{template.Name} {DateTime.Now}";
        var assessment = await AssessmentsDataService.AddAssessment(TeamId, template.Id, assessmentName);

        if (assessment is not null)
        {
            Assessments!.Add(assessment);
        }
    }

    private async void DeleteTeam()
    {
        var modal = Modal.Show<ConfirmationModal>($"Delete {Team!.Name}?");
        var modalResult = await modal.Result;

        if (!modalResult.Cancelled)
        {
            var deleteStatus = await TeamDataService.DeleteTeam(TeamId);
            if (deleteStatus == HttpStatusCode.OK)
            {
                Nav.NavigateTo("/teams-list-page");
                //TODO alert (on teams page) successfully deleted
            }
            //TODO alert (on this page) team wasn't deleted
        }


    }
}