@using SherpaFrontEnd.Model
@using SherpaFrontEnd.Services
@inject IAssessmentsDataService AssessmentsDataService;
@inject IGroupDataService GroupDataService;
@page "/assessments-page"
<h3>AssessmentsPage</h3>

<div>
    <div class="row">
        <div class="col-3">
            <AssessmentsGroupsList 
                Groups="@Groups" 
                SelectedGroupId="@SelectedGroupId"
                OnGroupClick="UpdateSelectedGroup"></AssessmentsGroupsList>
        </div>
        <div class="col-9">
            @if (Groups is not null)
            {
                <AssessmentsTable Assessments="@SelectedGroupAssessments"></AssessmentsTable>
            }
        </div>
    </div>
</div>

@code {
    public List<Group>? Groups { get; private set; }
    public List<Assessment>? Assessments { get; set; }
    public List<Assessment>? SelectedGroupAssessments { get; set; }
    public Guid SelectedGroupId { get; private set; }
    
    protected override async Task OnInitializedAsync()
    {
        await GetAssessments();
    }

    private async Task GetAssessments()
    {
        var assessments = await AssessmentsDataService.GetAssessments();
        var groups = await GroupDataService.GetGroups();
        
        if (groups is {Count: > 0})
        {
            Groups = groups;
            SelectedGroupId = Groups[0].Id;
            SelectedGroupAssessments = new List<Assessment>();
        }
        if (assessments is {Count: > 0 })
        {
            Assessments = assessments;
            var groupedAssessments = Assessments.GroupBy(assessment => assessment.GroupId);
            SelectedGroupAssessments = groupedAssessments.First(a => a.Key.Equals(SelectedGroupId)).ToList();
        }
        
    }
    
    private void UpdateSelectedGroup(Guid id)
    {
        if (Groups is not null)
        {
            SelectedGroupId = id;
            SelectedGroupAssessments = new List<Assessment>();
            
            if (Assessments is {Count: > 0 })
            {
                var groupedAssessments = Assessments.GroupBy(assessment => assessment.GroupId);
                SelectedGroupAssessments = groupedAssessments.First(a => a.Key.Equals(SelectedGroupId)).ToList();
            }
        }
    }
}