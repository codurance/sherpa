@using SherpaFrontEnd.Model
@using SherpaFrontEnd.Services
@inject IAssessmentsDataService AssessmentsDataService;
@inject IGroupDataService GroupDataService;
@page "/assessments-page"
<h3>AssessmentsPage</h3>


<div>
    <!-- TODO: populate dropdown */ -->
    <label>Select template:
        <select class="form-select" aria-label="Template select">
            <option value="Hackman analysis" disabled selected>Hackman analysis</option>
        </select>
    </label>
    <button class="btn btn-outline-primary btn-sm" @onclick="AddSurveyClick">Add survey</button>
</div>
<div>
    <div class="row">
        <div class="col-3">
            <AssessmentsGroupsList 
                Groups="@Groups" 
                SelectedGroupId="@SelectedGroupId"
                OnGroupClick="UpdateSelectedGroup"></AssessmentsGroupsList>
        </div>
        <div class="col-9">
            @if (Groups is not null)
            {
                <AssessmentsTable Assessments="@SelectedGroupAssessments"></AssessmentsTable>
            }
        </div>
    </div>
</div>

@code {
    public List<Group>? Groups { get; private set; }
    public List<Assessment>? Assessments { get; set; } = new ();
    public List<Assessment>? SelectedGroupAssessments { get; set; }
    public Guid SelectedGroupId { get; private set; }
    public SurveyTemplate SelectedSurveyTemplate { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetAssessments();
        await GetTemplates();
    }

    private async Task GetTemplates()
    {
        var templates = await AssessmentsDataService.GetTemplates();

        if (templates is {Count: >0})
        {
            SelectedSurveyTemplate = templates.First();
        }
    }

    private async Task GetAssessments()
    {
        var assessments = await AssessmentsDataService.GetAssessments();
        var groups = await GroupDataService.GetGroups();
        
        if (groups is {Count: > 0})
        {
            Groups = groups;
            SelectedGroupId = Groups[0].Id;
            SelectedGroupAssessments = new List<Assessment>();
        }
        if (assessments is {Count: > 0 })
        {
            Assessments = assessments;
            SetAssessmentsForSelectedGroup();
        }
        
    }
    
    private void UpdateSelectedGroup(Guid id)
    {
        if (Groups is not null)
        {
            SelectedGroupId = id;
            SelectedGroupAssessments = new List<Assessment>();
            
            if (Assessments is {Count: > 0 })
            {
                SetAssessmentsForSelectedGroup();
            }
        }
    }

    private async Task AddSurveyClick()
    {
        var assessmentName = $"{SelectedSurveyTemplate.Name} {DateTime.Now}";
        var assessment = await AssessmentsDataService.AddAssessment(SelectedGroupId, SelectedSurveyTemplate.Id, assessmentName);

        if (assessment is not null)
        {
            Assessments.Add(assessment);
            SetAssessmentsForSelectedGroup();
        }
    }

    private void SetAssessmentsForSelectedGroup()
    {
        var groupedAssessments = Assessments.GroupBy(assessment => assessment.GroupId);

        if (groupedAssessments.Any(a => a.Key == SelectedGroupId))
        {
            SelectedGroupAssessments = groupedAssessments.First(a => a.Key.Equals(SelectedGroupId)).ToList();
            return;
        }

        SelectedGroupAssessments = new List<Assessment>();
    }
}